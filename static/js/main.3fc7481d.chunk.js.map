{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","weather","setWeather","place","setPlace","useEffect","axios","get","then","data","console","log","catch","err","className","onChange","e","target","value","type","placeholder","onClick","location","name","country","current","temp_c","src","condition","icon","alt","text","cloud","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"0QA8DeA,G,MA1DH,WAAO,IAAD,EAEcC,mBAAS,MAFvB,mBAETC,EAFS,KAEAC,EAFA,OAIUF,mBAAS,IAJnB,mBAITG,EAJS,KAIFC,EAJE,KAMhBC,qBAAU,WACRC,IACGC,IAAI,2FACJC,MAAK,SAACC,GACLP,EAAWO,EAAKA,MAChBC,QAAQC,IAAIF,EAAKA,SAElBG,OAAM,SAACC,GACNH,QAAQC,IAAIE,QAEf,IAaH,OACE,yBAAKC,UAAU,OAEb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,eACb,2BAAOA,UAAU,SAASC,SAhBd,SAACC,GACnBZ,EAASY,EAAEC,OAAOC,QAeqCC,KAAK,SAASC,YAAY,qBAC3E,yBAAKN,UAAU,aACb,4BAAQO,QAdE,WAClBf,IAAMC,IAAN,0FAA6FJ,IAC1FK,MAAK,SAACC,GACLP,EAAWO,EAAKA,WAWZ,WAEF,yBAAKK,UAAU,aACZb,GACC,6BACE,4BAAKA,EAAQqB,SAASC,MACtB,4BAAKtB,EAAQqB,SAASE,SACtB,4BAAKvB,EAAQwB,QAAQC,OAArB,cACA,yBAAKZ,UAAU,cACb,yBAAKa,IAAK1B,EAAQwB,QAAQG,UAAUC,KAAMC,IAAI,MAEhD,4BAAK7B,EAAQwB,QAAQG,UAAUG,MAC/B,sCAAY9B,EAAQwB,QAAQO,cCxCxBC,QACW,cAA7BC,OAAOZ,SAASa,UAEe,UAA7BD,OAAOZ,SAASa,UAEhBD,OAAOZ,SAASa,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdlC,OAAM,SAAAmC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.3fc7481d.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport './Styles/App.css';\n\nconst App = () => {\n\n  const [weather, setWeather] = useState(null)\n\n  const [place, setPlace] = useState(\"\");\n\n  useEffect(() => {\n    axios\n      .get(\"https://api.weatherapi.com/v1/current.json?key=698767340bb948048da144645211101&q=London\")\n      .then((data) => {\n        setWeather(data.data)\n        console.log(data.data)\n      })\n      .catch((err) => {\n        console.log(err)\n      })\n  }, []);\n\n  const getLocation = (e) => {\n    setPlace(e.target.value)\n  }\n\n  const searchPlace = () => {\n    axios.get(`http://api.weatherapi.com/v1/current.json?key=698767340bb948048da144645211101&q=${place}`)\n      .then((data) => {\n        setWeather(data.data)\n      })\n  }\n\n  return (\n    <div className=\"App\">\n      \n      <div className=\"container\">\n        <div className=\"container-1\">\n          <input className=\"search\" onChange={getLocation} type=\"search\" placeholder=\"Search your City\" />\n          <div className=\"submitBtn\">\n            <button onClick={searchPlace} >Submit</button>\n          </div>\n          <div className=\"text-part\">\n            {weather && (\n              <div>\n                <h3>{weather.location.name}</h3>\n                <h2>{weather.location.country}</h2>\n                <h3>{weather.current.temp_c}Â°Celius</h3>\n                <div className=\"image-icon\">\n                  <img src={weather.current.condition.icon} alt=\"\" />\n                </div>\n                <h3>{weather.current.condition.text}</h3>\n                <h3>Cloud: {weather.current.cloud}</h3>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n};\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}